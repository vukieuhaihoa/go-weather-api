// Code generated by sqlc. DO NOT EDIT.
// source: location.sql

package db

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO location (
  name, longitude, latitude
) VALUES (
  $1, $2, $3
)
RETURNING id, name, longitude, latitude, count
`

type CreateLocationParams struct {
	Name      string  `json:"name"`
	Longitude float64 `json:"longitude"`
	Latitude  float64 `json:"latitude"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRowContext(ctx, createLocation, arg.Name, arg.Longitude, arg.Latitude)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Longitude,
		&i.Latitude,
		&i.Count,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM location
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLocation, id)
	return err
}

const getListLocation = `-- name: GetListLocation :many
SELECT id, name, longitude, latitude, count FROM location
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetListLocationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListLocation(ctx context.Context, arg GetListLocationParams) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getListLocation, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Longitude,
			&i.Latitude,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocation = `-- name: GetLocation :one
SELECT id, name, longitude, latitude, count FROM location
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Longitude,
		&i.Latitude,
		&i.Count,
	)
	return i, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE location SET count = count + 1
WHERE id = $1
RETURNING id, name, longitude, latitude, count
`

func (q *Queries) UpdateLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRowContext(ctx, updateLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Longitude,
		&i.Latitude,
		&i.Count,
	)
	return i, err
}
